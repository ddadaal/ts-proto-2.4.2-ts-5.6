// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.2
//   protoc               unknown
// source: test.proto
/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { makeGenericClientConstructor, } from "@grpc/grpc-js";
export const protobufPackage = "test";
function createBaseTestRequest() {
    return {};
}
export const TestRequest = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TestRequest.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTestRequest();
        return message;
    },
};
function createBaseTestResponse() {
    return {};
}
export const TestResponse = {
    encode(_, writer = new BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTestResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return TestResponse.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseTestResponse();
        return message;
    },
};
export const TestServiceService = {
    testMethod: {
        path: "/test.TestService/TestMethod",
        requestStream: false,
        responseStream: false,
        requestSerialize: (value) => Buffer.from(TestRequest.encode(value).finish()),
        requestDeserialize: (value) => TestRequest.decode(value),
        responseSerialize: (value) => Buffer.from(TestResponse.encode(value).finish()),
        responseDeserialize: (value) => TestResponse.decode(value),
    },
};
export const TestServiceClient = makeGenericClientConstructor(TestServiceService, "test.TestService");
